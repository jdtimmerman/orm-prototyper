package nl.ru.jtimmerm.controller;import java.awt.Point;import java.util.ArrayList;import java.util.Collection;import java.util.Locale;import java.util.prefs.Preferences;import javax.swing.JOptionPane;import nl.ru.jtimmerm.Lang;import nl.ru.jtimmerm.Settings;import nl.ru.jtimmerm.orm.IModel;import nl.ru.jtimmerm.orm.Model;import nl.ru.jtimmerm.orm.OrmException;import nl.ru.jtimmerm.orm.types.IFactType;import nl.ru.jtimmerm.orm.types.IObjectType;import nl.ru.jtimmerm.orm.types.IType;import nl.ru.jtimmerm.orm.types.MultiUnicityConstraint;import nl.ru.jtimmerm.orm.types.UnicityConstraint;import nl.ru.jtimmerm.view.IView;import org.apache.log4j.Logger;/** * The controller starts the application and handles the user input *  *  * TODO update model in a thread *  * @author joost *  */public abstract class Controller implements IController {		// ////////////////////////////////////////////////////////////////////////	// CONSTRUCT	// ////////////////////////////////////////////////////////////////////////		/**	 * Contains the model	 */	private IModel	mModel;		/**	 * Contains the view	 */	private IView	mView;		/**	 * Start the controller; initialize settings and create a model and view	 * instance	 */	public Controller() {				Lang.setLanguage(determineLanguage());				mModel = createModel();				// Insert Demo data		if (Settings.bool("insert_demo_data"))			insertDemoData();				mView = createView(mModel);			}		/**	 * Create a new model	 * 	 * @return A {@link Model} instance	 */	public IModel createModel() {		return new Model();	};		/**	 * Create a view with the given model. This method will be overwritten to	 * provide a concrete implementation of {@link IView}	 * 	 * @param model	 *            The {@link IModel} this view will be using	 * @return A view	 */	public abstract IView createView(IModel model);		/**	 * Determine the language from the settings or local preferences	 * 	 * @return A string representing the requested locale	 */	private String determineLanguage() {				String locale = "";				try {			String settings_locale = Settings.string("default_locale");			if (!settings_locale.equals(""))				locale = settings_locale;			else				throw new Exception("No locale set");		} catch (Exception e) {			locale = Preferences.userRoot().get("lang", Locale.getDefault().getDisplayName());		}				return locale;	}		/*	 * (non-Javadoc)	 * 	 * @see nl.ru.jtimmerm.controller.IController#start()	 */	@Override	public void start() {		mView.setViewListener(this);		mModel.addModelListener(mView);	}		// ////////////////////////////////////////////////////////////////////////	// MODEL CONTROLLER	// ////////////////////////////////////////////////////////////////////////		/*	 * (non-Javadoc)	 * 	 * @see nl.ru.jtimmerm.orm.IModelListener#modelChanged()	 */	@Override	public void modelChanged() {		log.debug(Lang.text("unimplemented_method"));	}		// ////////////////////////////////////////////////////////////////////////	// MANIPULATE CONTENT	// ////////////////////////////////////////////////////////////////////////		/*	 * (non-Javadoc)	 * 	 * @see nl.ru.jtimmerm.view.IViewListener#analyzeSentence(java.lang.String)	 */	@Override	public void analyzeSentence(String fact) {		try {			mModel.analyzeSentence(fact);		} catch (OrmException e) {			mView.showError(Lang.text("err_analyze"), e.getMessage(), JOptionPane.ERROR_MESSAGE);		}	}		/*	 * (non-Javadoc)	 * 	 * @see	 * nl.ru.jtimmerm.view.IViewListener#add(nl.ru.jtimmerm.orm.types.IType)	 */	@Override	public <T extends IType> void add(T type) {		try {			mModel.add(type);		} catch (OrmException e) {			mView.showError(Lang.text("err_add"), e.getMessage(), JOptionPane.ERROR_MESSAGE);		}	}		/*	 * (non-Javadoc)	 * 	 * @see	 * nl.ru.jtimmerm.view.IViewListener#remove(nl.ru.jtimmerm.orm.types.IType)	 */	@Override	public <T extends IType> void remove(T type) {		System.out.println("Removing " + type.toString());		try {			mModel.remove(type);		} catch (OrmException e) {			mView.showError(Lang.text("err_remove"), e.getMessage(), JOptionPane.ERROR_MESSAGE);		}	}		// ////////////////////////////////////////////////////////////////////////	// POSITION	// ////////////////////////////////////////////////////////////////////////		/*	 * (non-Javadoc)	 * 	 * @see	 * nl.ru.jtimmerm.view.IViewListener#newPosition(nl.ru.jtimmerm.orm.types	 * .IType, java.awt.Point)	 */	@Override	public <T extends IType> void newPosition(T type, Point position) {		log.debug(Lang.text("unimplemented_method"));	}		// ////////////////////////////////////////////////////////////////////////	// MANIPULATING CONSTRAINTS	// ////////////////////////////////////////////////////////////////////////		/*	 * (non-Javadoc)	 * 	 * @see	 * nl.ru.jtimmerm.view.IViewListener#addTotalityConstraint(nl.ru.jtimmerm	 * .orm.types.IObjectType, nl.ru.jtimmerm.orm.types.IFactType)	 */	@Override	public void addTotalityConstraint(IObjectType object, IFactType fact) {		log.debug(Lang.text("adding", Lang.text("totality")));				try {			mModel.addTotalityConstraint(object, fact);		} catch (OrmException e) {			mView.showError(Lang.text("err_update_constraint"), e.getMessage(), JOptionPane.ERROR_MESSAGE);		}	}		/*	 * (non-Javadoc)	 * 	 * @see	 * nl.ru.jtimmerm.view.IViewListener#removeTotalityConstraint(nl.ru.jtimmerm	 * .orm.types.IObjectType, nl.ru.jtimmerm.orm.types.IFactType)	 */	@Override	public void removeTotalityConstraint(IObjectType object, IFactType fact) {		log.debug("Remove Totality");				try {			mModel.removeTotalityConstraint(object, fact);		} catch (OrmException e) {			mView.showError(Lang.text("err_update_constraint"), e.getMessage(), JOptionPane.ERROR_MESSAGE);		}	}		/*	 * (non-Javadoc)	 * 	 * @see	 * nl.ru.jtimmerm.view.IViewListener#setUnicityConstraints(nl.ru.jtimmerm	 * .orm.types.IFactType, java.util.Collection)	 */	@Override	public void setUnicityConstraints(IFactType facttype, MultiUnicityConstraint muc) {		log.debug("Set Unicity");				try {			mModel.setUnicityConstraints(facttype, muc);		} catch (OrmException e) {			mView.showError(Lang.text("err_update_constraint"), e.getMessage(), JOptionPane.ERROR_MESSAGE);		}	}		/*	 * (non-Javadoc)	 * 	 * @see	 * nl.ru.jtimmerm.view.IViewListener#setSampleData(nl.ru.jtimmerm.orm.types	 * .IObjectType, java.util.Collection)	 */	@Override	public void setSampleData(IObjectType objectType, Collection<String> samples) {		log.debug("Set sample data");				try {			mModel.setSampleData(objectType, samples);		} catch (OrmException e) {			mView.showError(Lang.text("err_update_ot"), e.getMessage(), JOptionPane.ERROR_MESSAGE);		}	}		/*	 * (non-Javadoc)	 * 	 * @see	 * nl.ru.jtimmerm.view.IViewListener#setValueType(nl.ru.jtimmerm.orm.types	 * .IObjectType, boolean)	 */	@Override	public void setValueType(IObjectType objecttype, boolean isValueType) {		log.debug("Set valuetype");				try {			mModel.setValueType(objecttype, isValueType);		} catch (OrmException e) {			mView.showError(Lang.text("err_set_valuetype"), e.getMessage(), JOptionPane.ERROR_MESSAGE);		}			}		/*	 * (non-Javadoc)	 * 	 * @see	 * nl.ru.jtimmerm.view.IViewListener#updateFactType(nl.ru.jtimmerm.orm.types	 * .IFactType, java.lang.String, java.util.ArrayList)	 */	@Override	public void updateFactType(IFactType facttype, String verbalization, ArrayList<String> objects) {		log.debug("Updating facttype");		try {			mModel.updateFactType(facttype, verbalization, objects);		} catch (OrmException e) {			mView.showError(Lang.text("err_update_ft"), e.getMessage(), JOptionPane.ERROR_MESSAGE);		}	}		// ////////////////////////////////////////////////////////////////////////	// APPLICATION CONTROLLER	// ////////////////////////////////////////////////////////////////////////		/*	 * (non-Javadoc)	 * 	 * @see nl.ru.jtimmerm.view.IViewListener#exportFile()	 */	@Override	public void exportFile() {		try {			mView.getGraph().exportToFile();		} catch (Exception e) {			mView.showError(e.getMessage(), e.getCause().getMessage(), JOptionPane.ERROR_MESSAGE);		}	}		// ////////////////////////////////////////////////////////////////////////	// LOG	// ////////////////////////////////////////////////////////////////////////		protected final static Logger	log	= Logger.getLogger(Controller.class);		// ////////////////////////////////////////////////////////////////////////	// DEMO	// ////////////////////////////////////////////////////////////////////////		/*	 * (non-Javadoc)	 * 	 * @see nl.ru.jtimmerm.controller.IController#insertDemoData()	 */	public void insertDemoData() {		try {						log.debug("Creating first sentence of demo data");			String fact1 = "Player is represented by Token";			mModel.analyzeSentence(fact1);						IObjectType player = mModel.findObjectType("Player");			player.addSamples("Alice", "Bob");						IObjectType token = mModel.findObjectType("Token");			token.setValueType(true);			token.addSamples("Hat", "Car");			IFactType representation = mModel.findFactType(fact1);			representation.addTotality(player);			representation.addTotality(token);			representation.addUnicity(new UnicityConstraint(new boolean[] { true, false }));			representation.addUnicity(new UnicityConstraint(new boolean[] { false, true }));						log.debug("Creating second sentence of demo data");			String fact2 = "Player bought Street in Turn";			mModel.analyzeSentence(fact2);						IObjectType street = mModel.findObjectType("Street");			street.addSamples("Vine Street", "Leicester Square");			IObjectType turn = mModel.findObjectType("Turn");			turn.setValueType(true);			turn.addSamples("1", "2");			IFactType bought = mModel.findFactType(fact2);			bought.addUnicity(new UnicityConstraint(new boolean[] { true, false, true }));			bought.addUnicity(new UnicityConstraint(new boolean[] { false, true, true }));						log.debug("Creating third sentence of demo data");			String fact3 = "Street is worth AmountOfMoney";			mModel.analyzeSentence(fact3);			IObjectType amountOfMoney = mModel.findObjectType("AmountOfMoney");			amountOfMoney.addSamples("100", "300");			amountOfMoney.setValueType(true);						IFactType worth = mModel.findFactType(fact3);			worth.addTotality(street);			worth.addUnicity(new UnicityConstraint(new boolean[] { true, false }));						player.setGridPosition(0, 0);			representation.setGridPosition(1, 0);			token.setGridPosition(2, 0);									mView.modelChanged();		} catch (OrmException e) {			e.printStackTrace();		}	}	}